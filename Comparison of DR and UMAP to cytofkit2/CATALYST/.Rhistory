dev.off()
# Load the necessary library
library(dplyr)
View(expression.data)
# Subset the dataset using filter()
subsetted_expressiondata <- filter(expression.data, Event == "HC101E")
View(subsetted_expressiondata)
# Subset the dataset using filter()
subsetted_expressiondata <- filter(expression.data, Event == "HC101E")
# Subset the dataset using filter()
subsetted_expressiondata <- filter(expression.data, Event == HC101E)
# Subset the dataset using filter()
subsetted_expressiondata <- filter(expression.data, Event == 'HC101E')
colnames(expression.data)
subsetexpdat <- filter(expression.data, Event == "HC101E")
View(subsetexpdat)
View(expression.data)
class(expression.data$Event)
head(expression.data)
subsetexpdat <- subset(expression.data, Event == "HC101E")
View(subsetexpdat)
subsetexpdat <- subset(expression.data, Event == 'HC101E')
subsetexpdat <- filter(expression.data, Event == 'HC101E')
View(subsetexpdat)
View(plotmarkerexpression)
View(subsetexpdat)
subsetexpdat <- dplyr::filter(expression.data, Event == 'HC101E')
View(subsetexpdat)
subsetexpdat <- dplyr::filter(expression.data, "Event" == 'HC101E')
subsetexpdat <- dplyr::filter(expression.data, expression.data$Event == 'HC101E')
subsetexpdat <- filter(expression.data, expression.data$Event == 'HC101E')
class(expression.data$Event)
expression.data$Event <- as.character(expression.data$Event)
subsetexpdat <- filter(expression.data, Event == 'HC101E')
subsetexpdat <- filter(expression.data, Group == 'E')
subsetexpdat <- filter(expression.data,  Group == 'E')
subsetexpdat <- filter(expression.data, Batch == 'E')
subsetexpdat <- filter(expression.data, Batch == "E")
View(subsetexpdat)
subsetexpdat <- filter(expression.data, "Batch " == "E")
library(dplyr)
library(stringr)
subsetexp.dat <- expression.data %>%
mutate(Event=str_trim(Event)) %>%
filter(Event=="HC101E")
rm(subsetexp.dat)
library(dplyr)
library(stringr)
subsetexp.dat <- expression.data %>%
mutate(Event=str_trim(Event)) %>%
filter(Event=="HC101E")
library(dplyr)
library(stringr)
subsetexp.dat <- expression.data %>%
mutate(Event=str_trim(Event)) %>%
filter(Event=='HC101E')
View(subsetexp.dat)
subsetexp.dat <- filter(expression.data, Event %in% 'HC101E')
glimpse(expression.data)
subsetexp.dat <- expression.data %>%
mutate(Event=str_trim(Event)) %>%
filter(Event=='HC101E ')
subsetexp.dat <- filter(expression.data, Event %in% ' HC101E')
subsetexp.dat <- expression.data %>%
mutate(Event=str_trim(Event)) %>%
filter(Event=="HC101E ")
subsetexp.dat <- filter(expression.data, Event == " HC101E")
glimpse(subsetexp.dat)
rm(subsetexp.dat)
rm(subsetexpdat)
rm(subsetted_expressiondata)
glimpse(expression.data)
subsetexp.dat <- filter(expression.data, Event == "\"HC101E\"")
knitr::opts_chunk$set(echo = TRUE)
#### 1. Load packages, and set working directory
### Install CytoNorm package
library(devtools)
install_github('saeyslab/CytoNorm')
### Load libraries
library(Spectre)
Spectre::package.check()    # Check that all required packages are installed
Spectre::package.load()     # Load required packages
### Set PrimaryDirectory
dirname(rstudioapi::getActiveDocumentContext()$path)            # Finds the directory where this script is located
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))     # Sets the working directory to where the script is located
getwd()
PrimaryDirectory <- getwd()
PrimaryDirectory
### Set 'input' directory
setwd(PrimaryDirectory)
setwd("data/")
InputDirectory <- getwd()
setwd(PrimaryDirectory)
### Set 'metadata' directory
setwd(PrimaryDirectory)
setwd("metadata/")
MetaDirectory <- getwd()
setwd(PrimaryDirectory)
### Create output directory
dir.create("Output_Spectre", showWarnings = FALSE)
setwd("Output_Spectre")
OutputDirectory <- getwd()
